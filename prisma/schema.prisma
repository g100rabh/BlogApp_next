// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider  = "mysql"
  url       = env("DATABASE_URL") 
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String?
  postedAt  DateTime  @default(now()) @map(name: "posted_at")
  published Boolean   @default(false)
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?
  comments  Comment[]

  @@map(name: "posts")
}

enum Role {
  USER
  ADMIN
  MODERATOR
  AUTHOR
}

model User {
  id               String   @id @default(cuid())
  first_name       String?
  last_name        String?
  email            String?  @unique
  password         String
  role             Role?    @default(USER)
  isEmailVerified  Boolean  @default(false)
  isActive         Boolean  @default(false)
  createdAt        DateTime @default(now()) @map(name: "created_at")
  updatedAt        DateTime @updatedAt @map(name: "updated_at")
  posts            Post[]
  token            String?
  mobile_number    String?
  address          String?
  profile_pic      String?
  isProfileComplete Boolean  @default(false)
  createdShows     ShowDetails[]


  @@map(name: "users")
}

model Comment {
  id           String         @id @default(cuid())
  content      String?
  email        String?
  postId       String?
  commentedAt  DateTime       @default(now()) @map(name: "commented_at")
  post         Post?          @relation(fields: [postId], references: [id])
  CommentReply CommentReply[]

  @@map(name: "comments")
}

model CommentReply {
  id        String   @id @default(cuid())
  content   String?
  email     String?
  commentId String?
  repliedAt DateTime @default(now()) @map(name: "replied_at")
  comment   Comment? @relation(fields: [commentId], references: [id])

  @@map(name: "commentReply")
}

model ShowDetails {
  id                String      @id @default(cuid())
  showName          String
  showType          String
  showDateAndTime   DateTime
  noOfTickets       Int
  createdBy         User        @relation(fields: [createdById], references: [id])
  createdById       String
  createdAt         DateTime @default(now()) @map(name: "created_at")
  showTickets       ShowTicket[]

  @@map(name: "showDetails")
}

enum ShowMode {
  ONLINE
  OFFLINE
  BOTH
}

model ShowTicket {
  id           String     @id @default(cuid())
  showId       String?
  showMode     ShowMode
  categories   String
  showDetailId String
  showDetail   ShowDetails @relation(fields: [showDetailId], references: [id])

  @@map(name: "showTickets")
}


// model TicketCategory {
//   id       String @id @default(cuid())
//   name     String
//   quantity Int
//   price    Float
//   showTicketId String
//   showTicket   ShowTicket @relation(fields: [showTicketId], references: [id])

//   @@map(name: "ticketCategories")
// } 

